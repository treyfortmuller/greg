# Get camera frustums generated from extrinsics, extract the data from a ply fiel generated by OpenMVG, plot it in
# matplotlib for accurate a repeatable viewing
# Trey Fortmuller

import numpy as np
import os
import subprocess
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# OPENMVG CONSTANTS
# indicate the openMVG binary directory
OPENMVG_SFM_BIN = "/home/trey.fortmuller/openMVG_Build/Linux-x86_64-RELEASE"

# indicate the the camera sensor width database directory,
# still don't know why I need this, what does the pipeline pull from this file
CAMERA_SENSOR_WIDTH_DIRECTORY = "/home/trey.fortmuller/openMVG/src/openMVG/exif/sensor_width_database"

# PROJECT CONSTANTS
# indicate the project directory, the directory where the python scripts reside
PROJECT_DIR = input_eval_dir = os.path.dirname(os.path.abspath(__file__))

# define a directory to indicate the name's of our directories in our file structure relative to project directory
file_struct = {"input": "/../sfm_in",
               "output": "/../sfm_out",
               "matches": "/../sfm_out/sfm_matches",
               "reconstruction": "/../sfm_out/sfm_reconstruction"}

# define all the relevant directories
input_dir = PROJECT_DIR + file_struct["input"]
output_dir = PROJECT_DIR + file_struct["output"]
matches_dir = PROJECT_DIR + file_struct["matches"]
reconstruction_dir = PROJECT_DIR + file_struct["reconstruction"]
camera_file_params = CAMERA_SENSOR_WIDTH_DIRECTORY + "/sensor_width_camera_database.txt"

# CONSTANTS
z_upper_thresh = 30  # top of the door
z_lower_thresh = -60  # bottom of the door


def get_x_coords(full_coords):
    x_coords = np.array([])
    for coord in full_coords:
        x_coords = np.append(x_coords, coord[0])
    return x_coords.tolist()


def get_y_coords(full_coords):
    y_coords = np.array([])
    for coord in full_coords:
        y_coords = np.append(y_coords, coord[1])
    return y_coords.tolist()


def get_z_coords(full_coords):
    z_coords = np.array([])
    for coord in full_coords:
        z_coords = np.append(z_coords, coord[2])
    return z_coords.tolist()


print("EXPORT CAM FRUSTUMS")
# https://github.com/openMVG/openMVG/blob/master/src/software/SfM/main_ExportCameraFrustums.cpp
pExport = subprocess.Popen([os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ExportCameraFrustums"),
                            "-i", matches_dir + "/sfm_data.json",
                            "-o", reconstruction_dir + "/frustums.ply"])
pExport.wait()

# now parse the ply file and plot the data in matplotlib instead of viewing it in meshlab
frustum_data = [[15.0000000000000036, 25.9807621135331566,  0.0000000000000000],
[15.0723734869742749, 26.9807621135331566, -1.1964853905660391],
[14.0023818228901931, 26.9807621135331566, -0.5787254152764379],
[14.4142218064165935, 26.9807621135331566,  0.1346023607796172],
[15.4842134705006753, 26.9807621135331566, -0.4831576145099838],
[12.6785478522209836, 27.1892336110994997,  0.0000000000000000],
[12.8549265091286706, 28.1892336110994997, -1.1856246374136388],
[11.7351651568796029, 28.1892336110994997, -0.6634713435539017],
[12.0832673527860948, 28.1892336110994997,  0.0830362246121433],
[13.2030287050351607, 28.1892336110994997, -0.4391170692475939],
[10.2606042997700655, 28.1907786235772484,  0.0000000000000000],
[10.5396457785317548, 29.1907786235772484, -1.1657405648707915],
[9.3786367981387073, 29.1907786235772484, -0.7431678542919696],
[9.6603519385245900, 29.1907786235772484,  0.0308381326367278],
[10.8213609189176356, 29.1907786235772484, -0.3917345779420941],
[7.7645713530756222, 28.9777747886720505,  0.0000000000000000],
[8.1441519795480861, 29.9777747886720505, -1.1369845027358791],
[6.9507313503882413, 29.9777747886720505, -0.8172084089218565],
[7.1639154129309226, 29.9777747886720505, -0.0215946561486269],
[8.3573360420907665, 29.9777747886720505, -0.3413707499626495],
[5.2094453300079122, 29.5442325903662422,  0.0000000000000000],
[5.6866762664266455, 30.5442325903662422, -1.0995753020051335],
[4.4699266400949877, 30.5442325903662422, -0.8850295141159192],
[4.6129571653544641, 30.5442325903662422, -0.0738630965614806],
[5.8297067916861218, 30.5442325903662422, -0.2884088844506949],
[2.6146722824297441, 29.8858409427523668,  0.0000000000000000],
[3.1859215132086836, 30.8858409427523668, -1.0537976692844089],
[1.9551030890551071, 30.8858409427523668, -0.9461150103121286],
[2.0268915283699607, 30.8858409427523668, -0.1255693942097444],
[3.2577099525235367, 30.8858409427523668, -0.2332520531820246],
[0.0000000000000018, 30.0000000000000000,  0.0000000000000000],
[0.6609199735632028, 31.0000000000000000, -0.9999999999999999],
[-0.5745999770159991, 31.0000000000000000, -0.9999999999999999],
[-0.5745999770159990, 31.0000000000000000, -0.1763200329471986],
[0.6609199735632029, 31.0000000000000000, -0.1763200329471987],
[-2.6146722824297473, 29.8858409427523668,  0.0000000000000000],
[-1.8691115661554916, 30.8858409427523668, -0.9385917268990820],
[-3.0999299903090680,30.8858409427523668, -1.0462743858713623],
[-3.1717184296239216, 30.8858409427523668, -0.2257287697689781],
[-1.9409000054703451, 30.8858409427523668, -0.1180461107966978],
[-5.2094453300079095, 29.5442325903662422,  0.0000000000000000],
[-4.3849180382553152, 30.5442325903662422, -0.8700402040192823],
[-5.6016676645869730, 30.5442325903662422, -1.0845859919084966],
[-5.7446981898464493, 30.5442325903662422, -0.2734195743540578],
[-4.5279485635147916, 30.5442325903662422, -0.0588737864648436],
[-7.7645713530756257, 28.9777747886720505,  0.0000000000000000],
[-6.8673526363981203, 29.9777747886720505, -0.7948671498422571],
[-8.0607732655579660, 29.9777747886720505, -1.1146432436562799],
[-8.2739573281006464, 29.9777747886720505, -0.3190294908830504],
[-7.0805366989408025, 29.9777747886720505,  0.0007466029309724],
[-10.2606042997700619, 28.1907786235772519,   0.0000000000000000],
[-9.2975225343570358, 29.1907786235772519, -0.7136446767010252],
[-10.4585315147500815, 29.1907786235772519,  -1.1362173872798469],
[-10.7402466551359623, 29.1907786235772519,  -0.3622114003511494],
[-9.5792376747429167, 29.1907786235772519,  0.0603613102276723],
[-12.6785478522209800,  27.1892336110995032,   0.0000000000000000],
[-11.6569326718318944,  28.1892336110995032,  -0.6269909366596610],
[-12.7766940240809621,  28.1892336110995032,  -1.1491442305193980],
[-13.1247962199874539,  28.1892336110995032,  -0.4026366623533529],
[-12.0050348677383862,  28.1892336110995032,   0.1195166315063841],
[-14.9999999999999929,  25.9807621135331601,   0.0000000000000000],
[-13.9276265130257215,  26.9807621135331601,  -0.5355654170028382],
[-14.9976181771098052,  26.9807621135331601,  -1.1533253922924389],
[-15.4094581606362055,  26.9807621135331601,  -0.4399976162363836],
[-14.3394664965521219,  26.9807621135331601,   0.1777623590532171]]

# PLOTTING
# initialize a 3d plot with matplotlib
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.set_xlim3d(-25, 65)  # arbitrarily chosen points to maintain the scale between axis
ax.set_ylim3d(-10, 80)
ax.set_zlim3d(-50, 50)

# plot the hinge axis as a vertical line
ax.plot([0, 0], [0, 0], [z_lower_thresh, z_upper_thresh], c='black', linewidth=3.0)

# plot the points we won't collide with in blue
ax.scatter(get_x_coords(frustum_data),
           get_y_coords(frustum_data),
           get_z_coords(frustum_data),
           c='b',
           marker='o')

plt.show()
